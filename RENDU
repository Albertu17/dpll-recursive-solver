                      Mini-projet 1 : solveur DPLL récursif
                             fichier RENDU
                       (à remplir obligatoirement)

**Un mini-projet sans fichier RENDU rempli ne recevra pas de note.**

Date limite: 3 novembre 2023, 23h59

Identité
--------
Nombre de binôme: 16
Nom, prénom 1: Tomasi, Albert
Nom, prénom 2: De Larminat, Foucauld


Questions sur votre code
------------------------
0. Avez-vous testé que `make dpll` s'exécute sans erreurs ou warnings,
   et que ensuite `./dpll sudoku-4x4.cnf` donne la réponse attendue (voir
   fichier README) ?

Oui, nous avons testé ces commandes. 'make dpll' s'exécute sans erreurs ou
warnings et le résultat './dpll sudoku-4x4.cnf' correspond à celui attendu.

---

1. Avez-vous utilisé la fonction `filter_map` (donné dans dpll.ml)
   dans votre implémentation de `simplifie` ? 
   - Si oui, expliquez en quelques phrases en français comment vous
     l'avez utilisée.
   - Si non, expliquez en quelques phrases en français comment
     fonctionne votre implémentation de `simplifie`.

Oui, nous avons utilisé la fonction 'filter_map' dans notre implémentation
de 'simplifie'.
Notre fonction 'simplifie' déclare une fonction imbriquée 'simplifieClause'
(int list -> int list option) qui opère sur une seule clause. En notant cl
la clause qui lui est passée en argument et l le littéral par lequel on
cherche à simplifier l'ensemble de clauses, 'simplifieClause' fonctionne
de la manière suivante:
   . si cl contient l, elle renvoie None;
   . si cl contient -l, elle renvoie Some(cl privée de -l);
   . sinon, elle renvoie Some(cl).
La fonction 'simplifie' correspond ensuite dans notre implémentation au
résultat de l'application de 'simplifieClause' sur l'ensemble des clauses
par 'filter_map'.

---

2. Pour l'implémentation de `unitaire`, quelles sont les fonctions
   auxiliaires que vous avez utilisées et/ou écrites ? (Par une
   fonction auxiliaire, on entend ici soit une fonction d'une
   bibliothèque, par exemple des fonctions comme `List.length`,
   `List.rev_append`, ou une fonction `aux_unitaire` que vous avez
   écrite vous-mêmes.) Expliquez en quelques phrases en français
   comment ces fonctions auxiliaires sont utilisées dans votre
   implémentation de la fonction `unitaire`.

Nous n'avons pas utilisé de fonction auxiliaire dans notre implémentation
de la fonction 'unitaire'. Celle-ci parcourt la liste de clauses qui lui 
est passée en argument, et vérifie pour chaque élément si il correspond à
une clause unitaire par pattern matching. Si c'est le cas, le littéral 
constituant cette clause est renvoyé. Si toute la liste a été parcourue,
l'exception Not_found est levée.

---

3. Pour l'implémentation de `pur`, quelles sont les fonctions
   auxiliaires que vous avez utilisées et/ou écrites ?  Expliquez en
   quelques phrases en français comment ces fonctions auxiliaires sont
   utilisées dans votre implémentation de la fonction `pur`.

Nous avons fait le choix de regrouper dans la fonction 'pur' à la fois la
recherche d'un littéral pur et la recherche du littéral ayant le plus
d'occurences parmi toutes les clauses. Cette dernière recherche permet 
d'appliquer la règle split de manière plus optimisée (voir Q5) au cas où
la recherche d'un littéral pur ne soit pas fructueuse.
Ce regroupement est dû au fait que les opérations nécessaires pour effectuer
ces recherches sont similaires dans notre implémentation: applatir la liste
des clauses et, pour chacun de ses éléments, compter le nombre d'occurences
de son opposé.
Notre fonction 'pur' renvoie donc un littéral pur s'il en existe, et renvoie
sinon le littéral ayant le plus d'occurences.
Nous avons écrit comme fonction auxiliaire à la fonction 'pur' une
fonction 'count_abs_occ' (int list -> int -> int * int) qui compte, pour un
littéral x et une liste l de littéraux, les occurences absolues de x dans l:
le nombre d'occurences c de x dans l et le nombre d'occurences c' de -x dans l.
Cette fonction renvoie le couple (c,c').
Au sein de la fonction 'pur', nous avons utilisés les fonctions 'flatten' et
'filter' du module List. 'flatten' est utilisée pour applatir la liste de
clauses, et 'filter' est utilisée pour retirer de la liste des littéraux ceux
qui ont déjà été reconnus comme n'étant pas purs: cela évite le double, triple,
quadruple... comptage, ce qui compense son utilisation en terme de complexité
pour des formules comportant beaucoup de clauses/répétitions du même littéral
à travers toutes les clauses. 

---

4. Donnez un exemple d'une formule pour laquelle les deux fonctions
   `solveur_split` et `solveur_dpll_rec` ont un comportement
   différent, et expliquez les différences entre ces deux fonctions.

La formule correspondant à l'exemple 7_2 ({(1,-1,-3);(-2,3);(-2)}) est
évaluée comme satisfiable par les deux solveurs, mais ces derniers ne
donnent pas la même interprétation comme premier exemple de
satisfiabilité:
   . solveur_split donne comme exemple les valeurs 1, -2 et une valeur
   indifférente pour 3.
   . solveur_dpll_rec donne comme exemple les valeurs -2, -3 et une
   valeur indifférente pour 1.
Cette différence s'explique par le fait que solveur_split commence
par appliquer la règle split avec 1, tandis que solveur_dpll_rec commence
par appliquer la règle unit, ce qui entraîne une simplification par -2.
De manière générale, la principale différence entre les deux solveurs
est l'application supplémentaire des règles unit et pure avant celle
de la règle split dans le solveur dpll.
Dans notre implémentation, une différence supplémentaire entre les deux
solveurs réside dans le choix du littéral avec lequel appliquer la règle
split: 'solveur_split' applique cette règle avec la tête de la première
clause de la liste de clauses, tandis que 'solveur_dpll_rec' l'applique
avec le littéral ayant le plus d'occurences parmi toutes les clauses
(voir question suivante).

---

5. Avez-vous d'autres remarques sur votre rendu ? (question optionnelle)

Notre impémentation de la fonction 'solveur_dpll_rec' comporte une
application de la règle split un peu plus otpimisée qu'une application
naïve: au lieu d'appliquer cette règle avec un littéral pris au hasard,
nous l'appliquons avec le littéral ayant le plus d'occurences parmi
toutes les clauses. Cela permet de réduire plus rapidement la taille des
clauses, et donc augmente les chances de pouvoir appliquer les règles unit
et pur.
La recherche du littéral ayant le plus d'occurences parmi les clauses ne
requiert pratiquement pas d'opérations supplémentaires, puisqu'elle est 
associée à la recherche d'un littéral pur, qui est de toutes façons
lancée lors de chaque appel récursif (voir Q3).


---

--fin du fichier RENDU--